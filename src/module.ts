import { defineNuxtModule, createResolver, addTemplate, addImportsDir, updateTemplates, useLogger } from '@nuxt/kit'

import { generateTransformCode } from './codegen'
import { parseApi } from './parser'

const log = useLogger('nuxt-fetch-transforms')

export default defineNuxtModule({
	meta: {
		name: 'nuxt-transforms',
		configKey: 'fetchTransforms',
		compatibility: {
			nuxt: '^3.0.0',
		},
	},
	setup(options, nuxt) {
		const resolver = createResolver(import.meta.url)
		const buildResolver = createResolver(nuxt.options.buildDir)

		// Create the transforms template
		const transformsTemplate = addTemplate({
			filename: 'fetch-transforms.ts',
			write: true,
			getContents: () => getTransforms(),
		})

		nuxt.options.alias['#fetch-transforms'] = buildResolver.resolve('./fetch-transforms')
		nuxt.options.build.transpile.push(resolver.resolve('./runtime'))
		addImportsDir(resolver.resolve('./runtime/app/composables'))

		nuxt.hook('nitro:build:before', async (nitro) => {
			nitro.hooks.hook('compiled', async () => {
				await updateTemplates({ filter: (template) => template.filename === transformsTemplate.filename })
			})
		})
	},
})

// Function to get transforms
export async function getTransforms() {
	try {
		const start = performance.now()

		// Parse API routes and their types
		const apiTypes = await parseApi()

		// Generate transform code
		const code = generateTransformCode(apiTypes)

		const transforms = `
// Generated by @nasontech/nuxt-fetch-transforms
// DO NOT EDIT DIRECTLY

${code}
`.trim()

		const end = performance.now()
		const duration = end - start

		log.success(`Nuxt fetch transforms generated in ${duration.toFixed(0)} ms`)
		return transforms
	}
	catch (error) {
		return 'export const transforms = {}\n export default transforms'
	}
}
